{"version":3,"sources":["../node_modules/psl/index.js","../node_modules/node-libs-browser/node_modules/punycode/punycode.js","../node_modules/webpack/buildin/module.js","../node_modules/webpack/buildin/global.js"],"names":["Punycode","require","internals","rules","map","rule","suffix","replace","punySuffix","wildcard","charAt","exception","endsWith","str","indexOf","length","findRule","domain","punyDomain","toASCII","reduce","memo","exports","errorCodes","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_INVALID_CHARS","validate","input","ascii","label","labels","split","i","test","parse","TypeError","slice","toLowerCase","error","message","code","parsed","tld","sld","subdomain","listed","domainParts","handlePunycode","pop","join","tldParts","privateParts","push","shift","unshift","get","isValid","Boolean","root","nodeType","module","freeGlobal","global","window","self","punycode","maxInt","base","regexPunycode","regexNonASCII","regexSeparators","errors","floor","Math","stringFromCharCode","String","fromCharCode","type","RangeError","array","fn","result","mapDomain","string","parts","ucs2decode","value","extra","output","counter","charCodeAt","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","decode","out","basic","j","index","oldi","w","t","baseMinusT","codePoint","inputLength","n","bias","lastIndexOf","splice","encode","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","define","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","l","g","this","Function","e"],"mappings":"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","file":"static/js/3.a7375ba1.chunk.js","sourcesContent":["/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */\n'use strict';\n\n\nvar Punycode = require('punycode');\n\n\nvar internals = {};\n\n\n//\n// Read rules from file.\n//\ninternals.rules = require('./data/rules.json').map(function (rule) {\n\n  return {\n    rule: rule,\n    suffix: rule.replace(/^(\\*\\.|\\!)/, ''),\n    punySuffix: -1,\n    wildcard: rule.charAt(0) === '*',\n    exception: rule.charAt(0) === '!'\n  };\n});\n\n\n//\n// Check is given string ends with `suffix`.\n//\ninternals.endsWith = function (str, suffix) {\n\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n\n//\n// Find rule for a given domain.\n//\ninternals.findRule = function (domain) {\n\n  var punyDomain = Punycode.toASCII(domain);\n  return internals.rules.reduce(function (memo, rule) {\n\n    if (rule.punySuffix === -1){\n      rule.punySuffix = Punycode.toASCII(rule.suffix);\n    }\n    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {\n      return memo;\n    }\n    // This has been commented out as it never seems to run. This is because\n    // sub tlds always appear after their parents and we never find a shorter\n    // match.\n    //if (memo) {\n    //  var memoSuffix = Punycode.toASCII(memo.suffix);\n    //  if (memoSuffix.length >= punySuffix.length) {\n    //    return memo;\n    //  }\n    //}\n    return rule;\n  }, null);\n};\n\n\n//\n// Error codes and messages.\n//\nexports.errorCodes = {\n  DOMAIN_TOO_SHORT: 'Domain name too short.',\n  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',\n  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\n  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\n  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\n  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\n  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'\n};\n\n\n//\n// Validate domain name and throw if not valid.\n//\n// From wikipedia:\n//\n// Hostnames are composed of series of labels concatenated with dots, as are all\n// domain names. Each label must be between 1 and 63 characters long, and the\n// entire hostname (including the delimiting dots) has a maximum of 255 chars.\n//\n// Allowed chars:\n//\n// * `a-z`\n// * `0-9`\n// * `-` but not as a starting or ending character\n// * `.` as a separator for the textual portions of a domain name\n//\n// * http://en.wikipedia.org/wiki/Domain_name\n// * http://en.wikipedia.org/wiki/Hostname\n//\ninternals.validate = function (input) {\n\n  // Before we can validate we need to take care of IDNs with unicode chars.\n  var ascii = Punycode.toASCII(input);\n\n  if (ascii.length < 1) {\n    return 'DOMAIN_TOO_SHORT';\n  }\n  if (ascii.length > 255) {\n    return 'DOMAIN_TOO_LONG';\n  }\n\n  // Check each part's length and allowed chars.\n  var labels = ascii.split('.');\n  var label;\n\n  for (var i = 0; i < labels.length; ++i) {\n    label = labels[i];\n    if (!label.length) {\n      return 'LABEL_TOO_SHORT';\n    }\n    if (label.length > 63) {\n      return 'LABEL_TOO_LONG';\n    }\n    if (label.charAt(0) === '-') {\n      return 'LABEL_STARTS_WITH_DASH';\n    }\n    if (label.charAt(label.length - 1) === '-') {\n      return 'LABEL_ENDS_WITH_DASH';\n    }\n    if (!/^[a-z0-9\\-]+$/.test(label)) {\n      return 'LABEL_INVALID_CHARS';\n    }\n  }\n};\n\n\n//\n// Public API\n//\n\n\n//\n// Parse domain.\n//\nexports.parse = function (input) {\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Domain name must be a string.');\n  }\n\n  // Force domain to lowercase.\n  var domain = input.slice(0).toLowerCase();\n\n  // Handle FQDN.\n  // TODO: Simply remove trailing dot?\n  if (domain.charAt(domain.length - 1) === '.') {\n    domain = domain.slice(0, domain.length - 1);\n  }\n\n  // Validate and sanitise input.\n  var error = internals.validate(domain);\n  if (error) {\n    return {\n      input: input,\n      error: {\n        message: exports.errorCodes[error],\n        code: error\n      }\n    };\n  }\n\n  var parsed = {\n    input: input,\n    tld: null,\n    sld: null,\n    domain: null,\n    subdomain: null,\n    listed: false\n  };\n\n  var domainParts = domain.split('.');\n\n  // Non-Internet TLD\n  if (domainParts[domainParts.length - 1] === 'local') {\n    return parsed;\n  }\n\n  var handlePunycode = function () {\n\n    if (!/xn--/.test(domain)) {\n      return parsed;\n    }\n    if (parsed.domain) {\n      parsed.domain = Punycode.toASCII(parsed.domain);\n    }\n    if (parsed.subdomain) {\n      parsed.subdomain = Punycode.toASCII(parsed.subdomain);\n    }\n    return parsed;\n  };\n\n  var rule = internals.findRule(domain);\n\n  // Unlisted tld.\n  if (!rule) {\n    if (domainParts.length < 2) {\n      return parsed;\n    }\n    parsed.tld = domainParts.pop();\n    parsed.sld = domainParts.pop();\n    parsed.domain = [parsed.sld, parsed.tld].join('.');\n    if (domainParts.length) {\n      parsed.subdomain = domainParts.pop();\n    }\n    return handlePunycode();\n  }\n\n  // At this point we know the public suffix is listed.\n  parsed.listed = true;\n\n  var tldParts = rule.suffix.split('.');\n  var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);\n\n  if (rule.exception) {\n    privateParts.push(tldParts.shift());\n  }\n\n  parsed.tld = tldParts.join('.');\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  if (rule.wildcard) {\n    tldParts.unshift(privateParts.pop());\n    parsed.tld = tldParts.join('.');\n  }\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  parsed.sld = privateParts.pop();\n  parsed.domain = [parsed.sld,  parsed.tld].join('.');\n\n  if (privateParts.length) {\n    parsed.subdomain = privateParts.join('.');\n  }\n\n  return handlePunycode();\n};\n\n\n//\n// Get domain.\n//\nexports.get = function (domain) {\n\n  if (!domain) {\n    return null;\n  }\n  return exports.parse(domain).domain || null;\n};\n\n\n//\n// Check whether domain belongs to a known public suffix.\n//\nexports.isValid = function (domain) {\n\n  var parsed = exports.parse(domain);\n  return Boolean(parsed.domain && parsed.listed);\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}