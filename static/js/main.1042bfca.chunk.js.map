{"version":3,"sources":["hooks/useMediaQuery.ts","hooks/useSavedState.ts","App.tsx","hooks/useScrollDiff.ts","hooks/useIsNavBarLarge.ts","hooks/usePage.ts","hooks/useLocation.ts","serviceWorker.ts","index.tsx","common/contexts.ts","common/types.tsx"],"names":["useMediaQuery","query","defaultState","useState","queryState","setQueryState","useEffect","switchState","mediaQuery","window","matchMedia","matches","addEventListener","addListener","removeEventListener","removeListener","useSaveState","defaultValue","key","localStorage","getItem","save","setSave","setItem","Nav","React","lazy","Main","ContextProviders","props","isDarkMode","defaultIsDarkMode","isMobile","defaultIsMobile","scrollDiff","lastScroll","setLastScroll","setScrollDiff","tick","check","currentScroll","scrollY","newScrollDiff","Math","abs","requestAnimationFrame","shouldRun","innerHeight","document","body","getBoundingClientRect","height","useScrollDiff","isNavBarLarge","defaultIsNavBarLarge","setIsNavBarLarge","useIsNavBarLarge","useSavedState","defaultPage","page","savedPage","title","usePage","setPage","trigger","defaultLocation","location","setLocation","ids","PageMapping","forEach","locations","push","setLocationBasedOnScroll","match","map","id","getElementById","filter","el","sort","el1","el2","offsetTop","find","element","rect","topOfMatch","bottomOfMatch","bottom","topOfWindow","bottomOfWindow","targetLocation","setTargetLocation","waitForPageLoad","found","target","scrollTo","top","behavior","setTargetToCurrent","useLocation","Provider","value","children","App","className","fallback","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","PageContext","createContext","_","NavContext","LocationContext","DarkModeContext","Home","Projects","Links","Map","component"],"mappings":"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","file":"static/js/main.1042bfca.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\n\nexport default function useMediaQuery(query: string, defaultState: boolean) {\n    const [queryState, setQueryState] = useState(defaultState);\n    useEffect(() => {\n        /**\n         * Update queryState when detects CSS media queries changed.\n         */\n        const switchState = () => setQueryState(!queryState);\n        const mediaQuery = window.matchMedia(query);\n\n        setQueryState(mediaQuery.matches);\n\n        // use deprecated api if current api is not supported\n        if (mediaQuery.addEventListener) {\n            mediaQuery.addEventListener(\"change\", switchState);\n        } else {\n            // noinspection JSDeprecatedSymbols\n            mediaQuery.addListener(switchState);\n        }\n\n        return () => {\n            if (mediaQuery.removeEventListener) {\n                mediaQuery.removeEventListener(\"change\", switchState);\n            } else {\n                // noinspection JSDeprecatedSymbols\n                mediaQuery.removeListener(switchState);\n            }\n        }\n    }, [queryState, query])\n    return queryState;\n}","import React, {useEffect, useState} from \"react\";\n\nexport default function useSaveState(defaultValue: string, key: string): [string, React.Dispatch<React.SetStateAction<string>>] {\n    const [save, setSave] = useState(() => localStorage.getItem(key) || defaultValue);\n\n    useEffect(() => localStorage.setItem(key, save), [save, key]);\n\n    return [save, setSave];\n}","import React, {PropsWithChildren, Suspense} from 'react';\nimport './App.css';\nimport {\n    DarkModeContext,\n    defaultIsDarkMode,\n    defaultIsMobile,\n    LocationContext,\n    NavContext,\n    PageContext\n} from \"./common/contexts\";\nimport useMediaQuery from \"./hooks/useMediaQuery\";\nimport useScrollDiff from \"./hooks/useScrollDiff\";\nimport useLocation from \"./hooks/useLocation\";\nimport useIsNavBarLarge from \"./hooks/useIsNavBarLarge\";\nimport usePage from \"./hooks/usePage\";\n\n\nconst Nav = React.lazy(() => import('./components/Nav'));\nconst Main = React.lazy(() => import('./components/Main'));\n\nfunction ContextProviders(props: PropsWithChildren<any>) {\n    const isDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\", defaultIsDarkMode);\n    const isMobile = useMediaQuery(\"(max-width: 750px)\", defaultIsMobile)\n    const scrollDiff = useScrollDiff();\n    const isNavBarLarge = useIsNavBarLarge(scrollDiff);\n    const [page, setPage] = usePage();\n    const [location, setTargetLocation] = useLocation({scrollDiff, page}, isMobile);\n\n    return <>\n        <PageContext.Provider value={{page, setPage}}>\n            <DarkModeContext.Provider value={isDarkMode}>\n                <NavContext.Provider value={{isMobile, isNavBarLarge}}>\n                    <LocationContext.Provider value={{location, setTargetLocation}}>\n                        {props.children}\n                    </LocationContext.Provider>\n                </NavContext.Provider>\n            </DarkModeContext.Provider>\n        </PageContext.Provider>\n    </>;\n}\n\nexport default function App() {\n    return <>\n        <ContextProviders>\n            <div className={\"card-deck space-between container\"}>\n                <Suspense fallback={<></>}>\n                    <Nav/>\n                    <Main/>\n                </Suspense>\n            </div>\n        </ContextProviders>\n    </>;\n}\n\n\n","import {useEffect, useState} from \"react\";\n\nexport default function useScrollDiff() {\n    const [lastScroll, setLastScroll] = useState(0);\n    const [scrollDiff, setScrollDiff] = useState(0);\n    useEffect(() => {\n        /**\n         * Change nav bar size and also update the last scroll when scrolled enough.\n         */\n        let tick = false;\n        const check = () => {\n            if (tick) return;\n\n            const currentScroll = window.scrollY;\n            const newScrollDiff = currentScroll - lastScroll;\n\n            if (Math.abs(newScrollDiff) > 15) {\n                tick = true;\n                window.requestAnimationFrame(() => {\n                    let shouldRun = true;\n                    if (currentScroll <= 0 || currentScroll + window.innerHeight >= document.body.getBoundingClientRect().height) {\n                        shouldRun = false;\n                    }\n                    if (lastScroll <= 0 || lastScroll + window.innerHeight >= document.body.getBoundingClientRect().height) {\n                        shouldRun = false;\n                    }\n\n                    if (shouldRun) {\n                        setScrollDiff(newScrollDiff);\n                    }\n\n                    tick = false;\n                });\n                setLastScroll(currentScroll);\n            }\n        }\n\n        window.addEventListener(\"scroll\", check);\n        return () => window.removeEventListener(\"scroll\", check);\n    }, [lastScroll]);\n\n    return scrollDiff;\n}","import {useEffect, useState} from \"react\";\nimport {defaultIsNavBarLarge} from \"../common/contexts\";\n\nexport default function useIsNavBarLarge(scrollDiff: number) {\n    const [isNavBarLarge, setIsNavBarLarge] = useState(defaultIsNavBarLarge);\n\n    useEffect(() => setIsNavBarLarge(scrollDiff <= 0), [scrollDiff]);\n\n    return isNavBarLarge;\n}","import useSavedState from \"./useSavedState\";\nimport {defaultPage} from \"../common/contexts\";\nimport React, {useEffect} from \"react\";\n\nexport default function usePage(): [string, React.Dispatch<React.SetStateAction<string>>] {\n    const [page, savedPage] = useSavedState(defaultPage, \"page\");\n    useEffect(() => {\n        document.title = `Kathan Cheema - ${page}`;\n    }, [page]);\n    return [page, savedPage];\n}","import React, {useEffect, useState} from \"react\";\nimport {defaultLocation} from \"../common/contexts\";\nimport {LocationType, PageMapping} from \"../common/types\";\nimport useSavedState from \"./useSavedState\";\n\nexport default function useLocation(trigger: any, isMobile: boolean): [string, React.Dispatch<React.SetStateAction<string>>] {\n    const [location, setLocation] = useState(defaultLocation);\n    useEffect(() => {\n        /**\n         * Sets the location when the body is scrolled or the page is changed.\n         *\n         * Only runs when the trigger is changed.\n         * This solves issues with page switching not updating the location.\n         * There is also the dependency on location so that it can default back to the previous location when scrolling\n         * above or below bounds.\n         * The ticking of this method is handled through the ticking of the other useEffect.\n         */\n        const ids: LocationType[] = [];\n        PageMapping.forEach(locations => locations.locations.forEach(location => ids.push(location)));\n        const setLocationBasedOnScroll = () => {\n            const orderedLocations = ids.map(id => document.getElementById(id)) // map to elements\n                .filter(el => el) // find elements that are on screen (remove nulls)\n                .map(el => el as HTMLElement) // let the type system know that all elements are not null\n                .sort((el1, el2) => el1.offsetTop > el2.offsetTop ? 1 : -1) // sort by distance from top\n\n            // find closest to top that is on the screen\n            const match = orderedLocations.find(element => {\n                const rect = element.getBoundingClientRect();\n                const topOfMatch = element.offsetTop;\n                const bottomOfMatch = topOfMatch + rect.bottom;\n                const topOfWindow = window.scrollY;\n                const bottomOfWindow = topOfWindow + window.innerHeight;\n                return (topOfMatch >= topOfWindow && topOfMatch <= bottomOfWindow)\n                    || (bottomOfMatch >= topOfWindow && bottomOfMatch <= bottomOfWindow)\n            });\n            if (!match) {\n                // the current page isn't rendered on the dom\n                return window.requestAnimationFrame(setLocationBasedOnScroll);\n            }\n            setLocation(match.id);\n        }\n        window.requestAnimationFrame(setLocationBasedOnScroll);\n    }, [trigger]);\n\n    const [targetLocation, setTargetLocation] = useSavedState(defaultLocation, \"location\");\n    useEffect(() => {\n        const waitForPageLoad = () => {\n            window.requestAnimationFrame(() => {\n                const found = document.getElementById(targetLocation);\n                if (!found) {\n                    return waitForPageLoad();\n                }\n\n                let target = found!.offsetTop;\n                if (isMobile) {\n                    const nav = document.getElementById(\"nav\")!;\n                    target -= nav.getBoundingClientRect().height + 2;\n                }\n                window.scrollTo({top: target, behavior: \"smooth\"});\n            });\n        };\n        waitForPageLoad();\n    }, [targetLocation, isMobile]);\n\n    useEffect(() => {\n        const setTargetToCurrent = () => setTargetLocation(location);\n\n        window.addEventListener(\"beforeunload\", setTargetToCurrent);\n\n        return () => window.removeEventListener(\"beforeunload\", setTargetToCurrent);\n    }, [setTargetLocation, location]);\n\n    return [location, setTargetLocation];\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\n\nexport const defaultPage = \"Home\";\nexport const defaultLocation = \"about me\";\nexport const defaultIsNavBarLarge = true;\nexport const defaultIsDarkMode = true;\nexport const defaultIsMobile = false;\n\nexport const PageContext = React.createContext({\n    page: defaultPage, setPage: (_: string) => {\n    }\n});\nexport const NavContext = React.createContext({\n    isMobile: defaultIsMobile,\n    isNavBarLarge: defaultIsNavBarLarge\n});\n\nexport const LocationContext = React.createContext({\n    location: defaultLocation,\n    setTargetLocation: (_: string) => {\n    }\n});\nexport const DarkModeContext = React.createContext(defaultIsDarkMode);","import React, {PropsWithChildren} from \"react\";\n\nconst Home = React.lazy(() => import(\"../components/Home\"));\nconst Projects = React.lazy(() => import(\"../components/Projects\"));\nconst Links = React.lazy(() => import(\"../components/Links\"));\n\nexport type PageType = \"Home\" | \"Projects\" | \"Links\";\nexport type ProjectType =\n    \"pixel art\"\n    | \"invoice store\"\n    | \"rubik's cube solver\"\n    | \"energy usage tracker\"\n    | \"card games\"\n    | \"vcs visualiser\"\n    | \"cheem.uk\";\nexport type LinkType = \"web development links\" | \"general development links\" | \"useful links\";\nexport type HomeType = \"about me\";\nexport type LocationType = (HomeType | ProjectType | LinkType);\n\nexport type RepoLinkProps = { link: string };\nexport type NewTabLinkProps = { title?: string, mono?: boolean } & RepoLinkProps & PropsWithChildren<any>;\nexport type PageProps = { targetPage: PageType } & PropsWithChildren<any>;\nexport type CardProps = { headerTitle: LocationType, headerSubtitle: any, footer: any };\nexport type SmallCardProps =\n    ({ headerTitle: LocationType, id?: LocationType } | { headerTitle: string, id?: LocationType })\n    & PropsWithChildren<any>;\nexport type HeaderCardProps = { header: string } & PropsWithChildren<any>\n\nexport const PageMapping = new Map<PageType, { locations: LocationType[], component: React.ReactElement }>([\n    [\"Home\", {\n        locations: [\"about me\"],\n        component: <Home/>\n    }],\n    [\"Projects\", {\n        locations: [\"pixel art\", \"invoice store\", \"rubik's cube solver\", \"card games\", \"energy usage tracker\", \"vcs visualiser\", \"cheem.uk\"],\n        component: <Projects/>\n    }],\n    [\"Links\", {\n        locations: [\"web development links\", \"general development links\", \"useful links\"],\n        component: <Links/>\n    }]\n]);\n\n"],"sourceRoot":""}