{"version":3,"sources":["components/Nav.tsx"],"names":["NavListItem","props","tabIndex","className","active","style","cursor","onKeyUp","event","keyCode","onClick","undefined","children","NavLocation","Consumer","page","locationContext","targetLocation","location","setTargetLocation","setPage","targetPage","NavPage","pageContext","navContext","isMobile","isNavBarLarge","PageMapping","get","locations","map","Nav","pages","forEach","_","key","push","id"],"mappings":"6FAAA,+EAIA,SAASA,EAAYC,GACjB,OAAO,mCACH,oBACIC,SAAU,EACVC,UAAS,mBAAcF,EAAMG,OAAS,SAAW,IACjDC,MAAO,CAAEC,OAAQ,WACjBC,QAAS,SAAAC,GAAK,OAAsB,KAAlBA,EAAMC,QAAiBR,EAAMS,eAAYC,GAC3DD,QAAST,EAAMS,QALnB,SAMI,sBAAMP,UAAS,gBAAf,SAAmCF,EAAMW,eAKrD,SAASC,EAAYZ,GACjB,OAAO,mCACH,cAAC,IAAYa,SAAb,UACK,SAAAC,GAAI,OACD,cAAC,IAAgBD,SAAjB,UACK,SAAAE,GAAe,OACZ,cAAChB,EAAD,CAAaI,OAAQH,EAAMgB,iBAAmBD,EAAgBE,SAC1DR,QAAS,WACLM,EAAgBG,kBAAkBlB,EAAMgB,gBACxCF,EAAKK,QAAQnB,EAAMoB,aAH3B,SAKKpB,EAAMgB,yBASnC,SAASK,EAAQrB,GACb,OAAO,mCACH,cAAC,IAAYa,SAAb,UACK,SAAAS,GAAW,OACR,cAAC,IAAWT,SAAZ,UACK,SAAAU,GAAU,OACP,qCAEQA,EAAWC,WAAaD,EAAWE,cAC7B,6BACA,cAAC1B,EAAD,CAAaI,OAAQH,EAAMoB,aAAeE,EAAYR,KACpDL,QAAS,kBAAMa,EAAYH,QAAQnB,EAAMoB,aAD3C,SAEGpB,EAAMoB,aAIfG,EAAWC,UAAYxB,EAAMoB,aAAeE,EAAYR,KAClD,6BACF,oBAAIZ,UAAW,UAAf,SACI,6BACKwB,IAAYC,IAAI3B,EAAMoB,YAAaQ,UAAUC,KAAI,SAAAZ,GAAQ,OACtD,cAACL,EAAD,CAA4BQ,WAAYpB,EAAMoB,WAC1CJ,eAAgBC,GADFA,qBAcnD,SAASa,IACpB,IAAMC,EAAoB,GAE1B,OADAL,IAAYM,SAAQ,SAACC,EAAGC,GAAJ,OAAYH,EAAMI,KAAKD,MACpC,mCACH,qBAAKE,GAAG,MAAMlC,UAAW,WAAzB,SACI,6BACK6B,EAAMF,KAAI,SAAAf,GAAI,OAAI,cAACO,EAAD,CAAoBD,WAAYN,GAAlBA","file":"static/js/8.4244f9e6.chunk.js","sourcesContent":["import { LocationType, PageMapping, PageType } from \"../common/types\";\nimport React, { PropsWithChildren } from \"react\";\nimport { LocationContext, NavContext, PageContext } from \"../common/contexts\";\n\nfunction NavListItem(props: { active: boolean, onClick: () => void } & PropsWithChildren<any>) {\n    return <>\n        <li  /* eslint-disable-line jsx-a11y/no-noninteractive-element-interactions */\n            tabIndex={0} /* eslint-disable-line jsx-a11y/no-noninteractive-tabindex */\n            className={`nav-item ${props.active ? \"active\" : \"\"}`} \n            style={{ cursor: \"pointer\" }}\n            onKeyUp={event => event.keyCode === 13 ? props.onClick() : undefined}\n            onClick={props.onClick}> \n            <span className={`nav-link site`}>{props.children}</span>\n        </li>\n    </>;\n}\n\nfunction NavLocation(props: { targetPage: PageType, targetLocation: LocationType }) {\n    return <>\n        <PageContext.Consumer>\n            {page =>\n                <LocationContext.Consumer>\n                    {locationContext =>\n                        <NavListItem active={props.targetLocation === locationContext.location}\n                            onClick={() => {\n                                locationContext.setTargetLocation(props.targetLocation);\n                                page.setPage(props.targetPage);\n                            }}>\n                            {props.targetLocation}\n                        </NavListItem>\n                    }\n                </LocationContext.Consumer>\n            }\n        </PageContext.Consumer>\n    </>;\n}\n\nfunction NavPage(props: { targetPage: PageType }) {\n    return <>\n        <PageContext.Consumer>\n            {pageContext =>\n                <NavContext.Consumer>\n                    {navContext =>\n                        <>\n                            {\n                                navContext.isMobile && !navContext.isNavBarLarge\n                                    ? <></>\n                                    : <NavListItem active={props.targetPage === pageContext.page}\n                                        onClick={() => pageContext.setPage(props.targetPage)}>\n                                        {props.targetPage}\n                                    </NavListItem>\n                            }\n                            {\n                                navContext.isMobile && props.targetPage !== pageContext.page\n                                    ? <></> :\n                                    <li className={\"sub-nav\"}>\n                                        <ul>\n                                            {PageMapping.get(props.targetPage)!.locations.map(location =>\n                                                <NavLocation key={location} targetPage={props.targetPage}\n                                                    targetLocation={location} />\n                                            )}\n                                        </ul>\n                                    </li>\n                            }\n                        </>\n                    }\n                </NavContext.Consumer>\n            }\n        </PageContext.Consumer>\n    </>;\n}\n\nexport default function Nav() {\n    const pages: PageType[] = [];\n    PageMapping.forEach((_, key) => pages.push(key));\n    return <>\n        <nav id=\"nav\" className={\"side-nav\"}>\n            <ul>\n                {pages.map(page => <NavPage key={page} targetPage={page} />)}\n            </ul>\n        </nav>\n    </>;\n}"],"sourceRoot":""}